{"version":3,"file":"component---src-pages-index-tsx-fed048c1c0f198afe1e3.js","mappings":"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","sources":["webpack://josh-higgins-dev/./src/components/Layout.tsx","webpack://josh-higgins-dev/./src/components/MatrixIntro.tsx","webpack://josh-higgins-dev/./src/pages/index.tsx"],"sourcesContent":["import React from 'react'\nimport type { HeadFC } from 'gatsby'\n\ninterface LayoutProps {\n  children: React.ReactNode\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children }) => (\n  <>\n    {children}\n  </>\n)\n\nexport default Layout\n\nexport const Head: HeadFC = () => <link rel='icon' href='/favicon.ico' type='image/x-icon' />\n","import React, { useRef, useEffect } from 'react'\n\n// Constants for customization\nconst NAME = \"Josh Higgins\" // Your name to display\nconst FONT_SIZE = 16 // Font size in pixels\nconst START_STAGGER = 100 // Max frames to stagger initial column starts (higher = more gradual start)\nconst REVEAL_SPREAD = 50 // Max frames variation for name reveal timing (smaller = quicker full name reveal)\nconst MATRIX_COLOR = \"#0F0\" // Color of the rain\nconst NAME_COLOR = \"#FFF\" // Color of the fixed name and button\nconst TRANSITION_DURATION = 1000 // Duration in ms for color transition of name letters\nconst SHADOW_BLUR = 1 // Blur radius for the glow effect on name (reduced for less blur)\nconst TRAIL_ALPHA = 0.05 // Alpha for the fading trail (smaller = longer trail)\nconst FRAME_RATE = 33 // Milliseconds per frame (smaller = faster rain)\nconst RESET_PROB = 0.975 // Probability threshold for resetting a drop (higher = more gaps)\nconst KATAKANA = \"ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズソゾタダチジッツヅテデトドナニヌネノバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺー0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\" // Characters for rain\n\ninterface ComponentProps {\n  continueBtn: () => void\n}\n\nconst MatrixIntro = ({ continueBtn }: ComponentProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n    const ctx = canvas.getContext('2d')!\n    if (!ctx) return\n\n    let columns: number\n    let rows: number\n    let nameRow: number\n    let nameColStart: number\n    let drops: number[]\n    let fixed: Record<number, { char: string, revealTime: number }>[]\n    let namePositions: { col: number, char: string }[]\n    let revealed: number\n    let nameCols: Set<number>\n    let offsetX: number\n    let offsetY: number\n\n    const init = () => {\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n\n      columns = Math.floor(window.innerWidth / FONT_SIZE)\n      rows = Math.floor(window.innerHeight / FONT_SIZE)\n      offsetX = (window.innerWidth - columns * FONT_SIZE) / 2\n      offsetY = (window.innerHeight - rows * FONT_SIZE) / 2\n      nameRow = Math.floor(rows / 2)\n      nameColStart = Math.round((columns - NAME.length) / 2)\n\n      drops = new Array(columns).fill(0)\n      fixed = Array.from({ length: columns }, () => ({}))\n      namePositions = []\n      revealed = 0\n\n      // Set up name positions (skipping spaces for revealing, but preserving positions)\n      for (let i = 0; i < NAME.length; i++) {\n        const col = nameColStart + i\n        const char = NAME[i]\n        if (char !== \" \") {\n          namePositions.push({ col, char })\n        }\n      }\n\n      nameCols = new Set(namePositions.map(p => p.col))\n\n      // Set random delays for name columns\n      for (const col of nameCols) {\n        drops[col] = -Math.floor(Math.random() * REVEAL_SPREAD)\n      }\n\n      // Stagger non-name columns\n      for (let i = 0; i < columns; i++) {\n        if (!nameCols.has(i)) {\n          drops[i] = -Math.floor(Math.random() * START_STAGGER)\n        }\n      }\n\n      // Setup button position\n      if (buttonRef.current) {\n        buttonRef.current.style.top = `${offsetY + (nameRow + 1) * FONT_SIZE + FONT_SIZE}px`\n        buttonRef.current.style.display = \"none\"\n      }\n    }\n\n    // Setup button styles and onclick\n    const button = buttonRef.current\n    if (button) {\n      button.style.position = \"fixed\"\n      button.style.left = \"50%\"\n      button.style.transform = \"translateX(-50%)\"\n      button.style.color = NAME_COLOR\n      button.style.background = \"transparent\"\n      button.style.border = `1px solid ${NAME_COLOR}`\n      button.style.fontFamily = \"monospace\"\n      button.style.fontSize = `${FONT_SIZE}px`\n      button.style.padding = \"10px 20px\"\n      button.style.cursor = \"pointer\"\n      button.style.textShadow = `0 0 5px ${NAME_COLOR}`\n      button.style.boxShadow = `0 0 5px ${NAME_COLOR}`\n      button.onclick = () => {\n        continueBtn()\n      }\n    }\n\n    init()\n\n    function showButton() {\n      if (button) {\n        button.style.display = \"block\"\n      }\n    }\n\n    function hexToRgb(hex: string): [number, number, number] {\n      hex = hex.replace(/^#/, '')\n      if (hex.length === 3) {\n        hex = hex.split('').map(char => char + char).join('')\n      }\n      const num = parseInt(hex, 16)\n      const r = (num >> 16) & 255\n      const g = (num >> 8) & 255\n      const b = num & 255\n      return [r, g, b]\n    }\n\n    function rgbToHex(r: number, g: number, b: number): string {\n      return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase()\n    }\n\n    function interpolateColor(c1: string, c2: string, factor: number): string {\n      const [r1, g1, b1] = hexToRgb(c1)\n      const [r2, g2, b2] = hexToRgb(c2)\n      const r = Math.round(r1 + (r2 - r1) * factor)\n      const g = Math.round(g1 + (g2 - g1) * factor)\n      const b = Math.round(b1 + (b2 - b1) * factor)\n      return rgbToHex(r, g, b)\n    }\n\n    function draw() {\n      ctx.fillStyle = `rgba(0, 0, 0, ${TRAIL_ALPHA})`\n      ctx.fillRect(0, 0, window.innerWidth, window.innerHeight)\n\n      ctx.font = `${FONT_SIZE}px monospace`\n\n      const currentTime = Date.now()\n\n      // Draw fixed letters glow\n      ctx.shadowBlur = SHADOW_BLUR\n      ctx.shadowOffsetX = 0\n      ctx.shadowOffsetY = 0\n      for (let col = 0; col < columns; col++) {\n        for (let r in fixed[col]) {\n          const { char, revealTime } = fixed[col][r]\n          const age = (currentTime - revealTime) / TRANSITION_DURATION\n          const factor = Math.min(age, 1)\n          const color = interpolateColor(MATRIX_COLOR, NAME_COLOR, factor)\n          ctx.fillStyle = color\n          ctx.shadowColor = color\n          ctx.fillText(char, col * FONT_SIZE + offsetX, Number(r) * FONT_SIZE + offsetY)\n        }\n      }\n\n      // Draw fixed letters crisp on top\n      ctx.shadowBlur = 0\n      for (let col = 0; col < columns; col++) {\n        for (let r in fixed[col]) {\n          const { char, revealTime } = fixed[col][r]\n          const age = (currentTime - revealTime) / TRANSITION_DURATION\n          const factor = Math.min(age, 1)\n          const color = interpolateColor(MATRIX_COLOR, NAME_COLOR, factor)\n          ctx.fillStyle = color\n          ctx.fillText(char, col * FONT_SIZE + offsetX, Number(r) * FONT_SIZE + offsetY)\n        }\n      }\n\n      // Draw falling rain\n      ctx.fillStyle = MATRIX_COLOR\n      for (let i = 0; i < columns; i++) {\n        if (drops[i] > 0 && drops[i] <= rows) {\n          let text = KATAKANA[Math.floor(Math.random() * KATAKANA.length)]\n\n          // Check if at name row in a name column and not yet revealed\n          if (drops[i] === nameRow && nameCols.has(i) && !fixed[i][nameRow]) {\n            const pos = namePositions.find(p => p.col === i)\n            if (pos) {\n              text = pos.char\n              fixed[i][nameRow] = { char: text, revealTime: Date.now() }\n              revealed++\n              if (revealed === namePositions.length) {\n                showButton()\n              }\n            }\n          }\n\n          ctx.fillText(text, i * FONT_SIZE + offsetX, drops[i] * FONT_SIZE + offsetY)\n        }\n\n        // Reset if off screen\n        if ((drops[i] * FONT_SIZE + offsetY) > window.innerHeight && Math.random() > RESET_PROB) {\n          drops[i] = 0\n        }\n\n        drops[i]++\n      }\n    }\n\n    const interval = setInterval(draw, FRAME_RATE)\n\n    const handleResize = () => {\n      init()\n      // Force a redraw after resize\n      draw()\n    }\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      clearInterval(interval)\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [])\n\n  return (\n    <>\n      <canvas ref={canvasRef} style={{ position: 'fixed', top: 0, left: 0, background: 'black' }} />\n      <button ref={buttonRef}>Continue</button>\n    </>\n  )\n}\n\nexport default MatrixIntro\n","import React, { useState } from 'react'\nimport type { HeadFC, PageProps } from 'gatsby'\nimport Layout from '../components/Layout'\nimport MatrixIntro from '../components/MatrixIntro'\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const [showMain, setShowMain] = useState(false)\n\n  return (\n    <Layout>\n      <main>\n        {showMain ? (\n          <div>Hello World</div>\n        ): (\n          <MatrixIntro continueBtn={() => setShowMain(true)} />\n        )}\n      </main>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const Head: HeadFC = () => <title>Josh Higgins - Developer</title>\n"],"names":["_ref","children","React","NAME","FONT_SIZE","MATRIX_COLOR","NAME_COLOR","KATAKANA","continueBtn","canvasRef","useRef","buttonRef","useEffect","canvas","current","ctx","getContext","columns","rows","nameRow","nameColStart","drops","fixed","namePositions","revealed","nameCols","offsetX","offsetY","init","width","window","innerWidth","height","innerHeight","Math","floor","round","Array","fill","from","length","i","col","char","push","Set","map","p","random","has","style","top","display","button","hexToRgb","hex","replace","split","join","num","parseInt","interpolateColor","c1","c2","factor","r1","g1","b1","r2","g2","b2","r","g","b","toString","slice","toUpperCase","rgbToHex","draw","fillStyle","fillRect","font","currentTime","Date","now","shadowBlur","shadowOffsetX","shadowOffsetY","revealTime","age","min","color","shadowColor","fillText","Number","text","pos","find","position","left","transform","background","border","fontFamily","fontSize","padding","cursor","textShadow","boxShadow","onclick","interval","setInterval","handleResize","addEventListener","clearInterval","removeEventListener","ref","IndexPage","showMain","setShowMain","useState","Layout","MatrixIntro","Head"],"sourceRoot":""}